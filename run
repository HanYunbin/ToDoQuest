import React, { useState, useEffect, useCallback } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, doc, setDoc, onSnapshot, collection, addDoc, updateDoc } from 'firebase/firestore';

// Firebase 설정 (전역 변수로 제공됨)
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

// Firebase 초기화
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const auth = getAuth(app);

// 캐릭터 초기 능력치 및 레벨업 공식
const BASE_HEALTH = 100;
const BASE_INTELLIGENCE = 10;
const BASE_STRENGTH = 10;
const BASE_GOLD = 0;
const BASE_LEVEL = 1;
const BASE_EXP = 0;
const EXP_PER_LEVEL = 100; // 레벨업에 필요한 기본 경험치 (레벨에 따라 증가 가능)

// 능력치 계산 함수
const calculateDerivedStats = (character) => {
  const { health, intelligence, strength, level } = character;
  // 플로우차트의 공식을 기반으로 단순화하여 적용
  const maxHealth = BASE_HEALTH + (health * 2) + (level * 10);
  const maxMana = (intelligence * 5) + (level * 5); // MP는 현재 사용되지 않지만 추가
  const attack = strength * 1.5 + level * 2;
  const defense = health * 0.8 + level * 1;
  return { maxHealth, maxMana, attack, defense };
};

// 아바타 스타일 옵션 (간단한 색상으로 표현)
const AVATAR_STYLES = [
  { id: 'default', name: '기본', color: 'bg-gray-500' },
  { id: 'red', name: '빨강', color: 'bg-red-500' },
  { id: 'blue', name: '파랑', color: 'bg-blue-500' },
  { id: 'green', name: '초록', color: 'bg-green-500' },
  { id: 'purple', name: '보라', color: 'bg-purple-500' },
];

function App() {
  const [userId, setUserId] = useState(null);
  const [tasks, setTasks] = useState([]);
  const [character, setCharacter] = useState({
    health: BASE_HEALTH,
    intelligence: BASE_INTELLIGENCE,
    strength: BASE_STRENGTH,
    gold: BASE_GOLD,
    level: BASE_LEVEL,
    experience: BASE_EXP,
    inventory: [], // 아이템 인벤토리 추가
    avatarStyle: 'default', // 아바타 스타일 추가
  });
  const [newTaskName, setNewTaskName] = useState('');
  const [newTaskDifficulty, setNewTaskDifficulty] = useState('easy');
  const [newTaskType, setNewTaskType] = useState('general'); // 퀘스트 유형 추가
  const [loading, setLoading] = useState(true);
  const [isAuthReady, setIsAuthReady] = useState(false); // 인증 준비 상태

  // Firebase 인증 및 사용자 ID 설정
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (user) => {
      if (user) {
        setUserId(user.uid);
      } else {
        try {
          if (initialAuthToken) {
            await signInWithCustomToken(auth, initialAuthToken);
          } else {
            await signInAnonymously(auth);
          }
        } catch (error) {
          console.error("Firebase 인증 오류:", error);
        }
      }
      setIsAuthReady(true); // 인증 상태가 준비되었음을 표시
    });

    return () => unsubscribe();
  }, []);

  // 사용자 데이터 (캐릭터, 작업) 로드 및 실시간 동기화
  useEffect(() => {
    if (!isAuthReady || !userId) {
      return;
    }

    setLoading(true);

    // 캐릭터 데이터 실시간 동기화
    const characterDocRef = doc(db, `artifacts/${appId}/users/${userId}/character/main`);
    const unsubscribeCharacter = onSnapshot(characterDocRef, (docSnap) => {
      if (docSnap.exists()) {
        const data = docSnap.data();
        // avatarStyle이 없는 경우 기본값 설정
        setCharacter({ ...data, avatarStyle: data.avatarStyle || 'default' });
      } else {
        // 캐릭터 데이터가 없으면 초기값으로 설정
        setDoc(characterDocRef, {
          health: BASE_HEALTH,
          intelligence: BASE_INTELLIGENCE,
          strength: BASE_STRENGTH,
          gold: BASE_GOLD,
          level: BASE_LEVEL,
          experience: BASE_EXP,
          inventory: [],
          avatarStyle: 'default', // 초기 아바타 스타일
        })
          .then(() => setCharacter({
            health: BASE_HEALTH,
            intelligence: BASE_INTELLIGENCE,
            strength: BASE_STRENGTH,
            gold: BASE_GOLD,
            level: BASE_LEVEL,
            experience: BASE_EXP,
            inventory: [],
            avatarStyle: 'default',
          }))
          .catch(error => console.error("캐릭터 초기화 오류:", error));
      }
      setLoading(false);
    }, (error) => {
      console.error("캐릭터 데이터 로드 오류:", error);
      setLoading(false);
    });

    // 작업 데이터 실시간 동기화
    const tasksCollectionRef = collection(db, `artifacts/${appId}/users/${userId}/tasks`);
    const unsubscribeTasks = onSnapshot(tasksCollectionRef, (snapshot) => {
      const fetchedTasks = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setTasks(fetchedTasks);
    }, (error) => {
      console.error("작업 데이터 로드 오류:", error);
    });

    return () => {
      unsubscribeCharacter();
      unsubscribeTasks();
    };
  }, [userId, isAuthReady]);

  // 새 작업 추가
  const addTask = async () => {
    if (!newTaskName.trim() || !userId) {
      console.log("작업 이름을 입력해주세요.");
      return;
    }

    try {
      const tasksCollectionRef = collection(db, `artifacts/${appId}/users/${userId}/tasks`);
      await addDoc(tasksCollectionRef, {
        name: newTaskName,
        difficulty: newTaskDifficulty,
        type: newTaskType, // 퀘스트 유형 저장
        completed: false,
        createdAt: new Date(),
      });
      setNewTaskName('');
      setNewTaskDifficulty('easy');
      setNewTaskType('general');
    } catch (e) {
      console.error("작업 추가 오류:", e);
    }
  };

  // 작업 완료 및 캐릭터 능력치 업데이트
  const completeTask = async (taskId, difficulty, type) => {
    if (!userId) return;

    try {
      const taskDocRef = doc(db, `artifacts/${appId}/users/${userId}/tasks`, taskId);
      const characterDocRef = doc(db, `artifacts/${appId}/users/${userId}/character/main`);

      // 작업 완료 상태로 표시
      await setDoc(taskDocRef, { completed: true }, { merge: true });

      // 능력치, 골드, 경험치 계산
      let statIncrease = 0;
      let goldReward = 0;
      let expGain = 0;

      switch (difficulty) {
        case 'easy':
          statIncrease = 3;
          goldReward = 10;
          expGain = 20;
          break;
        case 'medium':
          statIncrease = 7;
          goldReward = 25;
          expGain = 50;
          break;
        case 'hard':
          statIncrease = 15;
          goldReward = 100;
          expGain = 100;
          break;
        default:
          break;
      }

      // 캐릭터 능력치 업데이트
      let updatedCharacter = { ...character };

      // 퀘스트 유형에 따른 능력치 증가
      switch (type) {
        case 'physical':
          updatedCharacter.strength += statIncrease;
          updatedCharacter.health += Math.floor(statIncrease / 2); // 체력도 소폭 증가
          break;
        case 'mental':
          updatedCharacter.intelligence += statIncrease;
          updatedCharacter.health += Math.floor(statIncrease / 2); // 체력도 소폭 증가
          break;
        case 'production':
          updatedCharacter.intelligence += Math.floor(statIncrease / 2);
          updatedCharacter.strength += Math.floor(statIncrease / 2);
          updatedCharacter.gold += goldReward; // 생산 퀘스트는 골드 보너스
          break;
        default: // 'general' 또는 기타
          updatedCharacter.health += statIncrease;
          updatedCharacter.intelligence += statIncrease;
          updatedCharacter.strength += statIncrease;
          break;
      }

      updatedCharacter.gold += goldReward;
      updatedCharacter.experience += expGain;

      // 레벨업 체크
      const nextLevelExpThreshold = character.level * EXP_PER_LEVEL;
      if (updatedCharacter.experience >= nextLevelExpThreshold) {
        updatedCharacter.level += 1;
        updatedCharacter.experience -= nextLevelExpThreshold; // 남은 경험치로 다음 레벨 시작
        // 레벨업 보너스 (예: 모든 기본 능력치 5 증가)
        updatedCharacter.health += 5;
        updatedCharacter.intelligence += 5;
        updatedCharacter.strength += 5;
        console.log(`레벨업! 현재 레벨: ${updatedCharacter.level}`);
      }

      // 아이템 드롭 (10% 확률)
      if (Math.random() < 0.1) {
        const newItem = `랜덤 아이템 ${Math.floor(Math.random() * 100) + 1}`;
        updatedCharacter.inventory = [...(updatedCharacter.inventory || []), newItem];
        console.log(`새로운 아이템 획득: ${newItem}`);
      }

      await setDoc(characterDocRef, updatedCharacter, { merge: true });

      // 작업 목록에서 완료된 작업 제거 (UI 업데이트)
      setTasks(prevTasks => prevTasks.filter(task => task.id !== taskId));

    } catch (e) {
      console.error("작업 완료 오류:", e);
    }
  };

  // 아바타 스타일 변경 함수
  const changeAvatarStyle = async (styleId) => {
    if (!userId) return;
    try {
      const characterDocRef = doc(db, `artifacts/${appId}/users/${userId}/character/main`);
      await updateDoc(characterDocRef, { avatarStyle: styleId });
      // UI를 즉시 업데이트하기 위해 로컬 상태도 업데이트
      setCharacter(prevChar => ({ ...prevChar, avatarStyle: styleId }));
    } catch (e) {
      console.error("아바타 스타일 변경 오류:", e);
    }
  };

  const { maxHealth, maxMana, attack, defense } = calculateDerivedStats(character);
  const nextLevelExpThreshold = character.level * EXP_PER_LEVEL;

  // 현재 선택된 아바타 스타일의 색상 클래스를 찾습니다.
  const currentAvatarColorClass = AVATAR_STYLES.find(
    (style) => style.id === character.avatarStyle
  )?.color || 'bg-gray-500'; // 기본값

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-900 text-white">
        <div className="text-lg font-semibold">로딩 중...</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 to-gray-800 text-white p-4 sm:p-8 font-inter">
      {/* 사용자 ID 표시 */}
      <div className="flex justify-end text-sm text-gray-400 mb-4">
        사용자 ID: <span className="font-mono ml-2">{userId || '로그인 중...'}</span>
      </div>

      <h1 className="text-4xl sm:text-5xl font-bold text-center mb-10 text-yellow-400 drop-shadow-lg">
        <span className="block mb-2">ToDoQuest</span>
        <span className="text-xl sm:text-2xl font-normal text-gray-300">RPG 일정 관리</span>
      </h1>

      <div className="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {/* 캐릭터 정보 카드 */}
        <div className="bg-gray-800 p-6 rounded-2xl shadow-xl border border-gray-700">
          <h2 className="text-2xl font-semibold mb-4 text-purple-400 flex items-center">
            <svg className="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path></svg>
            내 캐릭터
          </h2>
          {/* 아바타 표시 영역 */}
          <div className="flex justify-center mb-4">
            <div className={`w-24 h-24 rounded-full flex items-center justify-center text-white text-3xl font-bold ${currentAvatarColorClass} border-4 border-gray-600`}>
              {/* 간단한 아바타 표현 (색상) */}
              <span className="text-sm">아바타</span>
            </div>
          </div>
          <div className="space-y-3">
            <div className="flex items-center">
              <span className="text-gray-400 w-24">레벨:</span>
              <span className="font-bold text-lg text-green-400">{character.level}</span>
            </div>
            <div className="flex items-center">
              <span className="text-gray-400 w-24">경험치:</span>
              <span className="font-bold text-lg text-yellow-300">{character.experience} / {nextLevelExpThreshold}</span>
            </div>
            <div className="flex items-center">
              <span className="text-gray-400 w-24">체력:</span>
              <span className="font-bold text-lg text-red-400">{character.health} / {maxHealth}</span>
            </div>
            <div className="flex items-center">
              <span className="text-gray-400 w-24">지능:</span>
              <span className="font-bold text-lg text-blue-400">{character.intelligence}</span>
            </div>
            <div className="flex items-center">
              <span className="text-gray-400 w-24">힘:</span>
              <span className="font-bold text-lg text-orange-400">{character.strength}</span>
            </div>
            <div className="flex items-center">
              <span className="text-gray-400 w-24">공격력:</span>
              <span className="font-bold text-lg text-red-500">{attack.toFixed(0)}</span>
            </div>
            <div className="flex items-center">
              <span className="text-gray-400 w-24">방어력:</span>
              <span className="font-bold text-lg text-blue-500">{defense.toFixed(0)}</span>
            </div>
            <div className="flex items-center">
              <span className="text-gray-400 w-24">골드:</span>
              <span className="font-bold text-lg text-yellow-500 flex items-center">
                <svg className="w-5 h-5 mr-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z" clipRule="evenodd"></path></svg>
                {character.gold}
              </span>
            </div>
          </div>
        </div>

        {/* 새 작업 추가 카드 */}
        <div className="bg-gray-800 p-6 rounded-2xl shadow-xl border border-gray-700">
          <h2 className="text-2xl font-semibold mb-4 text-cyan-400 flex items-center">
            <svg className="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v3m0 0v3m0-3h3m-3 0H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
            새로운 퀘스트 추가
          </h2>
          <div className="space-y-4">
            <input
              type="text"
              placeholder="퀘스트 이름"
              className="w-full p-3 rounded-lg bg-gray-700 text-white border border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              value={newTaskName}
              onChange={(e) => setNewTaskName(e.target.value)}
            />
            <select
              className="w-full p-3 rounded-lg bg-gray-700 text-white border border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              value={newTaskDifficulty}
              onChange={(e) => setNewTaskDifficulty(e.target.value)}
            >
              <option value="easy">난이도: 쉬움</option>
              <option value="medium">난이도: 보통</option>
              <option value="hard">난이도: 어려움</option>
            </select>
            <select
              className="w-full p-3 rounded-lg bg-gray-700 text-white border border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              value={newTaskType}
              onChange={(e) => setNewTaskType(e.target.value)}
            >
              <option value="general">유형: 일반</option>
              <option value="physical">유형: 운동 (힘/체력)</option>
              <option value="mental">유형: 공부 (지능/체력)</option>
              <option value="production">유형: 생산 (지능/힘/골드)</option>
            </select>
            <button
              onClick={addTask}
              className="w-full bg-gradient-to-r from-blue-600 to-purple-600 text-white py-3 rounded-lg font-bold text-lg shadow-md hover:from-blue-700 hover:to-purple-700 transition duration-300 transform hover:scale-105"
            >
              퀘스트 생성
            </button>
          </div>
        </div>

        {/* 인벤토리 카드 */}
        <div className="bg-gray-800 p-6 rounded-2xl shadow-xl border border-gray-700">
          <h2 className="text-2xl font-semibold mb-4 text-orange-400 flex items-center">
            <svg className="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10m-4-2h8m-4 2v4"></path></svg>
            인벤토리
          </h2>
          {character.inventory && character.inventory.length === 0 ? (
            <p className="text-gray-400 text-center py-4">인벤토리가 비어있습니다.</p>
          ) : (
            <ul className="space-y-2">
              {character.inventory && character.inventory.map((item, index) => (
                <li key={index} className="bg-gray-700 p-3 rounded-lg text-white text-sm">
                  {item}
                </li>
              ))}
            </ul>
          )}
        </div>

        {/* 아바타 꾸미기 카드 */}
        <div className="bg-gray-800 p-6 rounded-2xl shadow-xl border border-gray-700 lg:col-span-3">
          <h2 className="text-2xl font-semibold mb-4 text-pink-400 flex items-center">
            <svg className="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path></svg>
            아바타 꾸미기
          </h2>
          <div className="flex flex-wrap gap-3 justify-center">
            {AVATAR_STYLES.map((style) => (
              <button
                key={style.id}
                onClick={() => changeAvatarStyle(style.id)}
                className={`flex flex-col items-center p-3 rounded-lg border-2 ${character.avatarStyle === style.id ? 'border-blue-500' : 'border-gray-600'} hover:border-blue-400 transition duration-200`}
              >
                <div className={`w-12 h-12 rounded-full ${style.color} mb-2`}></div>
                <span className="text-sm text-gray-300">{style.name}</span>
              </button>
            ))}
          </div>
        </div>
      </div>

      {/* 현재 퀘스트 목록 */}
      <div className="bg-gray-800 p-6 rounded-2xl shadow-xl border border-gray-700 mt-8 max-w-6xl mx-auto">
        <h2 className="text-2xl font-semibold mb-4 text-lime-400 flex items-center">
          <svg className="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path></svg>
          나의 퀘스트 목록
        </h2>
        {tasks.length === 0 ? (
          <p className="text-gray-400 text-center py-4">아직 퀘스트가 없습니다. 새로운 퀘스트를 추가해보세요!</p>
        ) : (
          <ul className="space-y-3">
            {tasks.map((task) => (
              <li
                key={task.id}
                className="flex flex-col sm:flex-row items-start sm:items-center justify-between bg-gray-700 p-4 rounded-lg shadow-sm border border-gray-600"
              >
                <div className="mb-2 sm:mb-0">
                  <p className="text-lg font-medium text-white">{task.name}</p>
                  <p className="text-sm text-gray-400">
                    난이도: <span className={`font-semibold ${task.difficulty === 'easy' ? 'text-green-300' : task.difficulty === 'medium' ? 'text-yellow-300' : 'text-red-300'}`}>
                      {task.difficulty === 'easy' ? '쉬움' : task.difficulty === 'medium' ? '보통' : '어려움'}
                    </span>
                    <span className="ml-4">유형: {
                      task.type === 'physical' ? '운동' :
                      task.type === 'mental' ? '공부' :
                      task.type === 'production' ? '생산' : '일반'
                    }</span>
                  </p>
                </div>
                <button
                  onClick={() => completeTask(task.id, task.difficulty, task.type)}
                  className="bg-gradient-to-r from-green-500 to-teal-500 text-white px-4 py-2 rounded-lg font-bold shadow-md hover:from-green-600 hover:to-teal-600 transition duration-300 transform hover:scale-105"
                >
                  퀘스트 완료
                </button>
              </li>
            ))}
          </ul>
        )}
      </div>
    </div>
  );
}

export default App;
